/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DataModel } from "@senx/discovery-widgets";
import { HCParams } from "./types/types";
export { DataModel } from "@senx/discovery-widgets";
export { HCParams } from "./types/types";
export namespace Components {
    interface DiscoveryHighcharts {
        "debug": boolean;
        "export": (type?: "png" | "svg") => Promise<void>;
        "height": number;
        "options": HCParams;
        "params": object;
        /**
          * ********************************************************** ********************** Methods **************************** **********************************************************
         */
        "resize": () => Promise<void>;
        "result": DataModel | string;
        "width": number;
    }
}
export interface DiscoveryHighchartsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDiscoveryHighchartsElement;
}
declare global {
    interface HTMLDiscoveryHighchartsElementEventMap {
        "draw": void;
    }
    interface HTMLDiscoveryHighchartsElement extends Components.DiscoveryHighcharts, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDiscoveryHighchartsElementEventMap>(type: K, listener: (this: HTMLDiscoveryHighchartsElement, ev: DiscoveryHighchartsCustomEvent<HTMLDiscoveryHighchartsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDiscoveryHighchartsElementEventMap>(type: K, listener: (this: HTMLDiscoveryHighchartsElement, ev: DiscoveryHighchartsCustomEvent<HTMLDiscoveryHighchartsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDiscoveryHighchartsElement: {
        prototype: HTMLDiscoveryHighchartsElement;
        new (): HTMLDiscoveryHighchartsElement;
    };
    interface HTMLElementTagNameMap {
        "discovery-highcharts": HTMLDiscoveryHighchartsElement;
    }
}
declare namespace LocalJSX {
    interface DiscoveryHighcharts {
        "debug"?: boolean;
        "height"?: number;
        "onDraw"?: (event: DiscoveryHighchartsCustomEvent<void>) => void;
        "options"?: HCParams;
        "params"?: object;
        "result"?: DataModel | string;
        "width"?: number;
    }
    interface IntrinsicElements {
        "discovery-highcharts": DiscoveryHighcharts;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "discovery-highcharts": LocalJSX.DiscoveryHighcharts & JSXBase.HTMLAttributes<HTMLDiscoveryHighchartsElement>;
        }
    }
}
